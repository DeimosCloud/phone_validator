name: Deploy Infrastructure


on:
  push:
    branches: 
       - Jumia-test
      # workflow_dispatch:
  # pull_request:
  #   types: [opened, synchronize]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: eu-west-1
  WORKING_DIRECTORY: Infrastructure/terraform

jobs:
  infrastructure-deploy:
    runs-on: ubuntu-latest
    defaults:
      run: 
        working-directory: ${{env.WORKING_DIRECTORY}}

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli 

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0

      # - name: Checkov Scan
      #   id: checkov
      #   uses: bridgecrewio/checkov-action@master
      #   with:
      #     directory: ${{env.WORKING_DIRECTORY}}
      #     framework: terraform 
      #     soft_fail: true

      - name: Initialize Terraform
        id: init
        run: terraform init

      - name: Terraform plan
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: true
        
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
        

      # - name: Post plan as comment on pull request
      #   uses: actions/github-script@v5
      #   with:
      #     script: |
      #       const fs = require('fs');
      #       const output = fs.readFileSync('tfplan', 'utf8');
      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       });

      # - name: Apply Terraform configuration
      #   run: terraform apply -auto-approve -input=false
    
      - name: Run Ansible playbooks
        run: |
          echo "${{ secrets.MASTER_NODE_SSH_KEY }}" > key.pem
          chmod 400 key.pem
          pwd
          scp -o StrictHostKeyChecking=no -i key.pem -r ../ansible ec2-user@34.243.126.143:~
          ssh -o StrictHostKeyChecking=no -i key.pem  ec2-user@34.243.126.143:~ "cd ansible && ansible-playbook -i hosts -C playbooks/servers.yml"